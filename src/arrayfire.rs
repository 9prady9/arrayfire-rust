extern crate libc;
/* automatically generated by rust-bindgen */

pub type dim_t = ::libc::c_longlong;
pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_longlong;
pub type __uint64_t = ::libc::c_ulonglong;
pub type __darwin_intptr_t = ::libc::c_long;
pub type __darwin_natural_t = ::libc::c_uint;
pub type __darwin_ct_rune_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed1 {
    pub _bindgen_data_: [u64; 16usize],
}
impl Union_Unnamed1 {
    pub unsafe fn __mbstate8(&mut self) -> *mut [::libc::c_char; 128usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _mbstateL(&mut self) -> *mut ::libc::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __mbstate_t = Union_Unnamed1;
pub type __darwin_mbstate_t = __mbstate_t;
pub type __darwin_ptrdiff_t = ::libc::c_long;
pub type __darwin_size_t = ::libc::c_ulong;
pub type __darwin_va_list = __builtin_va_list;
pub type __darwin_wchar_t = ::libc::c_int;
pub type __darwin_rune_t = __darwin_wchar_t;
pub type __darwin_wint_t = ::libc::c_int;
pub type __darwin_clock_t = ::libc::c_ulong;
pub type __darwin_socklen_t = __uint32_t;
pub type __darwin_ssize_t = ::libc::c_long;
pub type __darwin_time_t = ::libc::c_long;
pub type __darwin_blkcnt_t = __int64_t;
pub type __darwin_blksize_t = __int32_t;
pub type __darwin_dev_t = __int32_t;
pub type __darwin_fsblkcnt_t = ::libc::c_uint;
pub type __darwin_fsfilcnt_t = ::libc::c_uint;
pub type __darwin_gid_t = __uint32_t;
pub type __darwin_id_t = __uint32_t;
pub type __darwin_ino64_t = __uint64_t;
pub type __darwin_ino_t = __darwin_ino64_t;
pub type __darwin_mach_port_name_t = __darwin_natural_t;
pub type __darwin_mach_port_t = __darwin_mach_port_name_t;
pub type __darwin_mode_t = __uint16_t;
pub type __darwin_off_t = __int64_t;
pub type __darwin_pid_t = __int32_t;
pub type __darwin_sigset_t = __uint32_t;
pub type __darwin_suseconds_t = __int32_t;
pub type __darwin_uid_t = __uint32_t;
pub type __darwin_useconds_t = __uint32_t;
pub type __darwin_uuid_t = [::libc::c_uchar; 16usize];
pub type __darwin_uuid_string_t = [::libc::c_char; 37usize];
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_pthread_handler_rec {
    pub __routine: ::std::option::Option<extern "C" fn(arg1:
                                                           *mut ::libc::c_void)
                                             -> ()>,
    pub __arg: *mut ::libc::c_void,
    pub __next: *mut Struct___darwin_pthread_handler_rec,
}
impl ::std::clone::Clone for Struct___darwin_pthread_handler_rec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_pthread_handler_rec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_attr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 56usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_cond_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 40usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_cond_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_cond_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_condattr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 8usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_condattr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_condattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_mutex_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 56usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_mutex_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_mutex_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_mutexattr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 8usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_mutexattr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_mutexattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_once_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 8usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_once_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_once_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_rwlock_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 192usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_rwlock_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_rwlock_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_rwlockattr_t {
    pub __sig: ::libc::c_long,
    pub __opaque: [::libc::c_char; 16usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_rwlockattr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_rwlockattr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct__opaque_pthread_t {
    pub __sig: ::libc::c_long,
    pub __cleanup_stack: *mut Struct___darwin_pthread_handler_rec,
    pub __opaque: [::libc::c_char; 8176usize],
}
impl ::std::clone::Clone for Struct__opaque_pthread_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__opaque_pthread_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_pthread_attr_t = Struct__opaque_pthread_attr_t;
pub type __darwin_pthread_cond_t = Struct__opaque_pthread_cond_t;
pub type __darwin_pthread_condattr_t = Struct__opaque_pthread_condattr_t;
pub type __darwin_pthread_key_t = ::libc::c_ulong;
pub type __darwin_pthread_mutex_t = Struct__opaque_pthread_mutex_t;
pub type __darwin_pthread_mutexattr_t = Struct__opaque_pthread_mutexattr_t;
pub type __darwin_pthread_once_t = Struct__opaque_pthread_once_t;
pub type __darwin_pthread_rwlock_t = Struct__opaque_pthread_rwlock_t;
pub type __darwin_pthread_rwlockattr_t = Struct__opaque_pthread_rwlockattr_t;
pub type __darwin_pthread_t = *mut Struct__opaque_pthread_t;
pub type __darwin_nl_item = ::libc::c_int;
pub type __darwin_wctrans_t = ::libc::c_int;
pub type __darwin_wctype_t = __uint32_t;
pub type Enum_Unnamed2 = ::libc::c_uint;
pub const P_ALL: ::libc::c_uint = 0;
pub const P_PID: ::libc::c_uint = 1;
pub const P_PGID: ::libc::c_uint = 2;
pub type idtype_t = Enum_Unnamed2;
pub type pid_t = __darwin_pid_t;
pub type id_t = __darwin_id_t;
pub type sig_atomic_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_thread_state {
    pub __eax: ::libc::c_uint,
    pub __ebx: ::libc::c_uint,
    pub __ecx: ::libc::c_uint,
    pub __edx: ::libc::c_uint,
    pub __edi: ::libc::c_uint,
    pub __esi: ::libc::c_uint,
    pub __ebp: ::libc::c_uint,
    pub __esp: ::libc::c_uint,
    pub __ss: ::libc::c_uint,
    pub __eflags: ::libc::c_uint,
    pub __eip: ::libc::c_uint,
    pub __cs: ::libc::c_uint,
    pub __ds: ::libc::c_uint,
    pub __es: ::libc::c_uint,
    pub __fs: ::libc::c_uint,
    pub __gs: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct___darwin_i386_thread_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_i386_thread_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_fp_control {
    pub _bindgen_bitfield_1_: ::libc::c_ushort,
}
impl ::std::clone::Clone for Struct___darwin_fp_control {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_fp_control {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_fp_control_t = Struct___darwin_fp_control;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_fp_status {
    pub _bindgen_bitfield_1_: ::libc::c_ushort,
}
impl ::std::clone::Clone for Struct___darwin_fp_status {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_fp_status {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __darwin_fp_status_t = Struct___darwin_fp_status;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mmst_reg {
    pub __mmst_reg: [::libc::c_char; 10usize],
    pub __mmst_rsrv: [::libc::c_char; 6usize],
}
impl ::std::clone::Clone for Struct___darwin_mmst_reg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mmst_reg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_xmm_reg {
    pub __xmm_reg: [::libc::c_char; 16usize],
}
impl ::std::clone::Clone for Struct___darwin_xmm_reg {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_xmm_reg {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_float_state {
    pub __fpu_reserved: [::libc::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 224usize],
    pub __fpu_reserved1: ::libc::c_int,
}
impl ::std::clone::Clone for Struct___darwin_i386_float_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_i386_float_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_avx_state {
    pub __fpu_reserved: [::libc::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 224usize],
    pub __fpu_reserved1: ::libc::c_int,
    pub __avx_reserved1: [::libc::c_char; 64usize],
    pub __fpu_ymmh0: Struct___darwin_xmm_reg,
    pub __fpu_ymmh1: Struct___darwin_xmm_reg,
    pub __fpu_ymmh2: Struct___darwin_xmm_reg,
    pub __fpu_ymmh3: Struct___darwin_xmm_reg,
    pub __fpu_ymmh4: Struct___darwin_xmm_reg,
    pub __fpu_ymmh5: Struct___darwin_xmm_reg,
    pub __fpu_ymmh6: Struct___darwin_xmm_reg,
    pub __fpu_ymmh7: Struct___darwin_xmm_reg,
}
impl ::std::clone::Clone for Struct___darwin_i386_avx_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_i386_avx_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_i386_exception_state {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint32_t,
}
impl ::std::clone::Clone for Struct___darwin_i386_exception_state {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_i386_exception_state {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_debug_state32 {
    pub __dr0: ::libc::c_uint,
    pub __dr1: ::libc::c_uint,
    pub __dr2: ::libc::c_uint,
    pub __dr3: ::libc::c_uint,
    pub __dr4: ::libc::c_uint,
    pub __dr5: ::libc::c_uint,
    pub __dr6: ::libc::c_uint,
    pub __dr7: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct___darwin_x86_debug_state32 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_debug_state32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_thread_state64 {
    pub __rax: __uint64_t,
    pub __rbx: __uint64_t,
    pub __rcx: __uint64_t,
    pub __rdx: __uint64_t,
    pub __rdi: __uint64_t,
    pub __rsi: __uint64_t,
    pub __rbp: __uint64_t,
    pub __rsp: __uint64_t,
    pub __r8: __uint64_t,
    pub __r9: __uint64_t,
    pub __r10: __uint64_t,
    pub __r11: __uint64_t,
    pub __r12: __uint64_t,
    pub __r13: __uint64_t,
    pub __r14: __uint64_t,
    pub __r15: __uint64_t,
    pub __rip: __uint64_t,
    pub __rflags: __uint64_t,
    pub __cs: __uint64_t,
    pub __fs: __uint64_t,
    pub __gs: __uint64_t,
}
impl ::std::clone::Clone for Struct___darwin_x86_thread_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_thread_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_float_state64 {
    pub __fpu_reserved: [::libc::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_xmm8: Struct___darwin_xmm_reg,
    pub __fpu_xmm9: Struct___darwin_xmm_reg,
    pub __fpu_xmm10: Struct___darwin_xmm_reg,
    pub __fpu_xmm11: Struct___darwin_xmm_reg,
    pub __fpu_xmm12: Struct___darwin_xmm_reg,
    pub __fpu_xmm13: Struct___darwin_xmm_reg,
    pub __fpu_xmm14: Struct___darwin_xmm_reg,
    pub __fpu_xmm15: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 96usize],
    pub __fpu_reserved1: ::libc::c_int,
}
impl ::std::clone::Clone for Struct___darwin_x86_float_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_float_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_avx_state64 {
    pub __fpu_reserved: [::libc::c_int; 2usize],
    pub __fpu_fcw: Struct___darwin_fp_control,
    pub __fpu_fsw: Struct___darwin_fp_status,
    pub __fpu_ftw: __uint8_t,
    pub __fpu_rsrv1: __uint8_t,
    pub __fpu_fop: __uint16_t,
    pub __fpu_ip: __uint32_t,
    pub __fpu_cs: __uint16_t,
    pub __fpu_rsrv2: __uint16_t,
    pub __fpu_dp: __uint32_t,
    pub __fpu_ds: __uint16_t,
    pub __fpu_rsrv3: __uint16_t,
    pub __fpu_mxcsr: __uint32_t,
    pub __fpu_mxcsrmask: __uint32_t,
    pub __fpu_stmm0: Struct___darwin_mmst_reg,
    pub __fpu_stmm1: Struct___darwin_mmst_reg,
    pub __fpu_stmm2: Struct___darwin_mmst_reg,
    pub __fpu_stmm3: Struct___darwin_mmst_reg,
    pub __fpu_stmm4: Struct___darwin_mmst_reg,
    pub __fpu_stmm5: Struct___darwin_mmst_reg,
    pub __fpu_stmm6: Struct___darwin_mmst_reg,
    pub __fpu_stmm7: Struct___darwin_mmst_reg,
    pub __fpu_xmm0: Struct___darwin_xmm_reg,
    pub __fpu_xmm1: Struct___darwin_xmm_reg,
    pub __fpu_xmm2: Struct___darwin_xmm_reg,
    pub __fpu_xmm3: Struct___darwin_xmm_reg,
    pub __fpu_xmm4: Struct___darwin_xmm_reg,
    pub __fpu_xmm5: Struct___darwin_xmm_reg,
    pub __fpu_xmm6: Struct___darwin_xmm_reg,
    pub __fpu_xmm7: Struct___darwin_xmm_reg,
    pub __fpu_xmm8: Struct___darwin_xmm_reg,
    pub __fpu_xmm9: Struct___darwin_xmm_reg,
    pub __fpu_xmm10: Struct___darwin_xmm_reg,
    pub __fpu_xmm11: Struct___darwin_xmm_reg,
    pub __fpu_xmm12: Struct___darwin_xmm_reg,
    pub __fpu_xmm13: Struct___darwin_xmm_reg,
    pub __fpu_xmm14: Struct___darwin_xmm_reg,
    pub __fpu_xmm15: Struct___darwin_xmm_reg,
    pub __fpu_rsrv4: [::libc::c_char; 96usize],
    pub __fpu_reserved1: ::libc::c_int,
    pub __avx_reserved1: [::libc::c_char; 64usize],
    pub __fpu_ymmh0: Struct___darwin_xmm_reg,
    pub __fpu_ymmh1: Struct___darwin_xmm_reg,
    pub __fpu_ymmh2: Struct___darwin_xmm_reg,
    pub __fpu_ymmh3: Struct___darwin_xmm_reg,
    pub __fpu_ymmh4: Struct___darwin_xmm_reg,
    pub __fpu_ymmh5: Struct___darwin_xmm_reg,
    pub __fpu_ymmh6: Struct___darwin_xmm_reg,
    pub __fpu_ymmh7: Struct___darwin_xmm_reg,
    pub __fpu_ymmh8: Struct___darwin_xmm_reg,
    pub __fpu_ymmh9: Struct___darwin_xmm_reg,
    pub __fpu_ymmh10: Struct___darwin_xmm_reg,
    pub __fpu_ymmh11: Struct___darwin_xmm_reg,
    pub __fpu_ymmh12: Struct___darwin_xmm_reg,
    pub __fpu_ymmh13: Struct___darwin_xmm_reg,
    pub __fpu_ymmh14: Struct___darwin_xmm_reg,
    pub __fpu_ymmh15: Struct___darwin_xmm_reg,
}
impl ::std::clone::Clone for Struct___darwin_x86_avx_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_avx_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_exception_state64 {
    pub __trapno: __uint16_t,
    pub __cpu: __uint16_t,
    pub __err: __uint32_t,
    pub __faultvaddr: __uint64_t,
}
impl ::std::clone::Clone for Struct___darwin_x86_exception_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_exception_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_x86_debug_state64 {
    pub __dr0: __uint64_t,
    pub __dr1: __uint64_t,
    pub __dr2: __uint64_t,
    pub __dr3: __uint64_t,
    pub __dr4: __uint64_t,
    pub __dr5: __uint64_t,
    pub __dr6: __uint64_t,
    pub __dr7: __uint64_t,
}
impl ::std::clone::Clone for Struct___darwin_x86_debug_state64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_x86_debug_state64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mcontext32 {
    pub __es: Struct___darwin_i386_exception_state,
    pub __ss: Struct___darwin_i386_thread_state,
    pub __fs: Struct___darwin_i386_float_state,
}
impl ::std::clone::Clone for Struct___darwin_mcontext32 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mcontext32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mcontext_avx32 {
    pub __es: Struct___darwin_i386_exception_state,
    pub __ss: Struct___darwin_i386_thread_state,
    pub __fs: Struct___darwin_i386_avx_state,
}
impl ::std::clone::Clone for Struct___darwin_mcontext_avx32 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mcontext_avx32 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mcontext64 {
    pub __es: Struct___darwin_x86_exception_state64,
    pub __ss: Struct___darwin_x86_thread_state64,
    pub __fs: Struct___darwin_x86_float_state64,
}
impl ::std::clone::Clone for Struct___darwin_mcontext64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mcontext64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_mcontext_avx64 {
    pub __es: Struct___darwin_x86_exception_state64,
    pub __ss: Struct___darwin_x86_thread_state64,
    pub __fs: Struct___darwin_x86_avx_state64,
}
impl ::std::clone::Clone for Struct___darwin_mcontext_avx64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_mcontext_avx64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type mcontext_t = *mut Struct___darwin_mcontext64;
pub type pthread_attr_t = __darwin_pthread_attr_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_sigaltstack {
    pub ss_sp: *mut ::libc::c_void,
    pub ss_size: __darwin_size_t,
    pub ss_flags: ::libc::c_int,
}
impl ::std::clone::Clone for Struct___darwin_sigaltstack {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_sigaltstack {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type stack_t = Struct___darwin_sigaltstack;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___darwin_ucontext {
    pub uc_onstack: ::libc::c_int,
    pub uc_sigmask: __darwin_sigset_t,
    pub uc_stack: Struct___darwin_sigaltstack,
    pub uc_link: *mut Struct___darwin_ucontext,
    pub uc_mcsize: __darwin_size_t,
    pub uc_mcontext: *mut Struct___darwin_mcontext64,
}
impl ::std::clone::Clone for Struct___darwin_ucontext {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___darwin_ucontext {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ucontext_t = Struct___darwin_ucontext;
pub type sigset_t = __darwin_sigset_t;
pub type size_t = __darwin_size_t;
pub type uid_t = __darwin_uid_t;
#[repr(C)]
#[derive(Copy)]
pub struct Union_sigval {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union_sigval {
    pub unsafe fn sival_int(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sival_ptr(&mut self) -> *mut *mut ::libc::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_sigval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_sigval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigevent {
    pub sigev_notify: ::libc::c_int,
    pub sigev_signo: ::libc::c_int,
    pub sigev_value: Union_sigval,
    pub sigev_notify_function: ::std::option::Option<extern "C" fn(arg1:
                                                                       Union_sigval)
                                                         -> ()>,
    pub sigev_notify_attributes: *mut pthread_attr_t,
}
impl ::std::clone::Clone for Struct_sigevent {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigevent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___siginfo {
    pub si_signo: ::libc::c_int,
    pub si_errno: ::libc::c_int,
    pub si_code: ::libc::c_int,
    pub si_pid: pid_t,
    pub si_uid: uid_t,
    pub si_status: ::libc::c_int,
    pub si_addr: *mut ::libc::c_void,
    pub si_value: Union_sigval,
    pub si_band: ::libc::c_long,
    pub __pad: [::libc::c_ulong; 7usize],
}
impl ::std::clone::Clone for Struct___siginfo {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___siginfo {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type siginfo_t = Struct___siginfo;
#[repr(C)]
#[derive(Copy)]
pub struct Union___sigaction_u {
    pub _bindgen_data_: [u64; 1usize],
}
impl Union___sigaction_u {
    pub unsafe fn __sa_handler(&mut self)
     -> *mut ::std::option::Option<extern "C" fn(arg1: ::libc::c_int) -> ()> {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __sa_sigaction(&mut self)
     ->
         *mut ::std::option::Option<extern "C" fn(arg1: ::libc::c_int,
                                                  arg2: *mut Struct___siginfo,
                                                  arg3: *mut ::libc::c_void)
                                        -> ()> {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union___sigaction_u {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union___sigaction_u {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___sigaction {
    pub __sigaction_u: Union___sigaction_u,
    pub sa_tramp: ::std::option::Option<extern "C" fn(arg1:
                                                          *mut ::libc::c_void,
                                                      arg2: ::libc::c_int,
                                                      arg3: ::libc::c_int,
                                                      arg4: *mut siginfo_t,
                                                      arg5:
                                                          *mut ::libc::c_void)
                                            -> ()>,
    pub sa_mask: sigset_t,
    pub sa_flags: ::libc::c_int,
}
impl ::std::clone::Clone for Struct___sigaction {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___sigaction {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigaction {
    pub __sigaction_u: Union___sigaction_u,
    pub sa_mask: sigset_t,
    pub sa_flags: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_sigaction {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigaction {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sig_t =
    ::std::option::Option<extern "C" fn(arg1: ::libc::c_int) -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigvec {
    pub sv_handler: ::std::option::Option<extern "C" fn(arg1: ::libc::c_int)
                                              -> ()>,
    pub sv_mask: ::libc::c_int,
    pub sv_flags: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_sigvec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigvec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigstack {
    pub ss_sp: *mut ::libc::c_char,
    pub ss_onstack: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_sigstack {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigstack {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_longlong;
pub type uint8_t = ::libc::c_uchar;
pub type uint16_t = ::libc::c_ushort;
pub type uint32_t = ::libc::c_uint;
pub type uint64_t = ::libc::c_ulonglong;
pub type int_least8_t = int8_t;
pub type int_least16_t = int16_t;
pub type int_least32_t = int32_t;
pub type int_least64_t = int64_t;
pub type uint_least8_t = uint8_t;
pub type uint_least16_t = uint16_t;
pub type uint_least32_t = uint32_t;
pub type uint_least64_t = uint64_t;
pub type int_fast8_t = int8_t;
pub type int_fast16_t = int16_t;
pub type int_fast32_t = int32_t;
pub type int_fast64_t = int64_t;
pub type uint_fast8_t = uint8_t;
pub type uint_fast16_t = uint16_t;
pub type uint_fast32_t = uint32_t;
pub type uint_fast64_t = uint64_t;
pub type intptr_t = __darwin_intptr_t;
pub type uintptr_t = ::libc::c_ulong;
pub type intmax_t = ::libc::c_long;
pub type uintmax_t = ::libc::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timeval {
    pub tv_sec: __darwin_time_t,
    pub tv_usec: __darwin_suseconds_t,
}
impl ::std::clone::Clone for Struct_timeval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rlim_t = __uint64_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rusage {
    pub ru_utime: Struct_timeval,
    pub ru_stime: Struct_timeval,
    pub ru_maxrss: ::libc::c_long,
    pub ru_ixrss: ::libc::c_long,
    pub ru_idrss: ::libc::c_long,
    pub ru_isrss: ::libc::c_long,
    pub ru_minflt: ::libc::c_long,
    pub ru_majflt: ::libc::c_long,
    pub ru_nswap: ::libc::c_long,
    pub ru_inblock: ::libc::c_long,
    pub ru_oublock: ::libc::c_long,
    pub ru_msgsnd: ::libc::c_long,
    pub ru_msgrcv: ::libc::c_long,
    pub ru_nsignals: ::libc::c_long,
    pub ru_nvcsw: ::libc::c_long,
    pub ru_nivcsw: ::libc::c_long,
}
impl ::std::clone::Clone for Struct_rusage {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rusage {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rusage_info_t = *mut ::libc::c_void;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rusage_info_v0 {
    pub ri_uuid: [uint8_t; 16usize],
    pub ri_user_time: uint64_t,
    pub ri_system_time: uint64_t,
    pub ri_pkg_idle_wkups: uint64_t,
    pub ri_interrupt_wkups: uint64_t,
    pub ri_pageins: uint64_t,
    pub ri_wired_size: uint64_t,
    pub ri_resident_size: uint64_t,
    pub ri_phys_footprint: uint64_t,
    pub ri_proc_start_abstime: uint64_t,
    pub ri_proc_exit_abstime: uint64_t,
}
impl ::std::clone::Clone for Struct_rusage_info_v0 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rusage_info_v0 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rusage_info_v1 {
    pub ri_uuid: [uint8_t; 16usize],
    pub ri_user_time: uint64_t,
    pub ri_system_time: uint64_t,
    pub ri_pkg_idle_wkups: uint64_t,
    pub ri_interrupt_wkups: uint64_t,
    pub ri_pageins: uint64_t,
    pub ri_wired_size: uint64_t,
    pub ri_resident_size: uint64_t,
    pub ri_phys_footprint: uint64_t,
    pub ri_proc_start_abstime: uint64_t,
    pub ri_proc_exit_abstime: uint64_t,
    pub ri_child_user_time: uint64_t,
    pub ri_child_system_time: uint64_t,
    pub ri_child_pkg_idle_wkups: uint64_t,
    pub ri_child_interrupt_wkups: uint64_t,
    pub ri_child_pageins: uint64_t,
    pub ri_child_elapsed_abstime: uint64_t,
}
impl ::std::clone::Clone for Struct_rusage_info_v1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rusage_info_v1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rusage_info_v2 {
    pub ri_uuid: [uint8_t; 16usize],
    pub ri_user_time: uint64_t,
    pub ri_system_time: uint64_t,
    pub ri_pkg_idle_wkups: uint64_t,
    pub ri_interrupt_wkups: uint64_t,
    pub ri_pageins: uint64_t,
    pub ri_wired_size: uint64_t,
    pub ri_resident_size: uint64_t,
    pub ri_phys_footprint: uint64_t,
    pub ri_proc_start_abstime: uint64_t,
    pub ri_proc_exit_abstime: uint64_t,
    pub ri_child_user_time: uint64_t,
    pub ri_child_system_time: uint64_t,
    pub ri_child_pkg_idle_wkups: uint64_t,
    pub ri_child_interrupt_wkups: uint64_t,
    pub ri_child_pageins: uint64_t,
    pub ri_child_elapsed_abstime: uint64_t,
    pub ri_diskio_bytesread: uint64_t,
    pub ri_diskio_byteswritten: uint64_t,
}
impl ::std::clone::Clone for Struct_rusage_info_v2 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rusage_info_v2 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rusage_info_v3 {
    pub ri_uuid: [uint8_t; 16usize],
    pub ri_user_time: uint64_t,
    pub ri_system_time: uint64_t,
    pub ri_pkg_idle_wkups: uint64_t,
    pub ri_interrupt_wkups: uint64_t,
    pub ri_pageins: uint64_t,
    pub ri_wired_size: uint64_t,
    pub ri_resident_size: uint64_t,
    pub ri_phys_footprint: uint64_t,
    pub ri_proc_start_abstime: uint64_t,
    pub ri_proc_exit_abstime: uint64_t,
    pub ri_child_user_time: uint64_t,
    pub ri_child_system_time: uint64_t,
    pub ri_child_pkg_idle_wkups: uint64_t,
    pub ri_child_interrupt_wkups: uint64_t,
    pub ri_child_pageins: uint64_t,
    pub ri_child_elapsed_abstime: uint64_t,
    pub ri_diskio_bytesread: uint64_t,
    pub ri_diskio_byteswritten: uint64_t,
    pub ri_cpu_time_qos_default: uint64_t,
    pub ri_cpu_time_qos_maintenance: uint64_t,
    pub ri_cpu_time_qos_background: uint64_t,
    pub ri_cpu_time_qos_utility: uint64_t,
    pub ri_cpu_time_qos_legacy: uint64_t,
    pub ri_cpu_time_qos_user_initiated: uint64_t,
    pub ri_cpu_time_qos_user_interactive: uint64_t,
    pub ri_billed_system_time: uint64_t,
    pub ri_serviced_system_time: uint64_t,
}
impl ::std::clone::Clone for Struct_rusage_info_v3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rusage_info_v3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type rusage_info_current = Struct_rusage_info_v3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rlimit {
    pub rlim_cur: rlim_t,
    pub rlim_max: rlim_t,
}
impl ::std::clone::Clone for Struct_rlimit {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rlimit {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_proc_rlimit_control_wakeupmon {
    pub wm_flags: uint32_t,
    pub wm_rate: int32_t,
}
impl ::std::clone::Clone for Struct_proc_rlimit_control_wakeupmon {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_proc_rlimit_control_wakeupmon {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_wait {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_wait {
    pub unsafe fn w_status(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn w_T(&mut self) -> *mut Struct_Unnamed3 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn w_S(&mut self) -> *mut Struct_Unnamed4 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_wait {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_wait {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ct_rune_t = __darwin_ct_rune_t;
pub type rune_t = __darwin_rune_t;
pub type wchar_t = __darwin_wchar_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed5 {
    pub quot: ::libc::c_int,
    pub rem: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type div_t = Struct_Unnamed5;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed6 {
    pub quot: ::libc::c_long,
    pub rem: ::libc::c_long,
}
impl ::std::clone::Clone for Struct_Unnamed6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ldiv_t = Struct_Unnamed6;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed7 {
    pub quot: ::libc::c_longlong,
    pub rem: ::libc::c_longlong,
}
impl ::std::clone::Clone for Struct_Unnamed7 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type lldiv_t = Struct_Unnamed7;
pub type u_int8_t = ::libc::c_uchar;
pub type u_int16_t = ::libc::c_ushort;
pub type u_int32_t = ::libc::c_uint;
pub type u_int64_t = ::libc::c_ulonglong;
pub type register_t = int64_t;
pub type user_addr_t = u_int64_t;
pub type user_size_t = u_int64_t;
pub type user_ssize_t = int64_t;
pub type user_long_t = int64_t;
pub type user_ulong_t = u_int64_t;
pub type user_time_t = int64_t;
pub type user_off_t = int64_t;
pub type syscall_arg_t = u_int64_t;
pub type dev_t = __darwin_dev_t;
pub type mode_t = __darwin_mode_t;
pub type intl = ::libc::c_longlong;
pub type uintl = ::libc::c_ulonglong;
pub type Enum_Unnamed8 = ::libc::c_uint;
pub const AF_SUCCESS: ::libc::c_uint = 0;
pub const AF_ERR_NO_MEM: ::libc::c_uint = 101;
pub const AF_ERR_DRIVER: ::libc::c_uint = 102;
pub const AF_ERR_RUNTIME: ::libc::c_uint = 103;
pub const AF_ERR_INVALID_ARRAY: ::libc::c_uint = 201;
pub const AF_ERR_ARG: ::libc::c_uint = 202;
pub const AF_ERR_SIZE: ::libc::c_uint = 203;
pub const AF_ERR_TYPE: ::libc::c_uint = 204;
pub const AF_ERR_DIFF_TYPE: ::libc::c_uint = 205;
pub const AF_ERR_BATCH: ::libc::c_uint = 207;
pub const AF_ERR_NOT_SUPPORTED: ::libc::c_uint = 301;
pub const AF_ERR_NOT_CONFIGURED: ::libc::c_uint = 302;
pub const AF_ERR_NO_DBL: ::libc::c_uint = 401;
pub const AF_ERR_NO_GFX: ::libc::c_uint = 402;
pub const AF_ERR_INTERNAL: ::libc::c_uint = 998;
pub const AF_ERR_UNKNOWN: ::libc::c_uint = 999;
pub type af_err = Enum_Unnamed8;
pub type Enum_Unnamed9 = ::libc::c_uint;
pub const f32: ::libc::c_uint = 0;
pub const c32: ::libc::c_uint = 1;
pub const f64: ::libc::c_uint = 2;
pub const c64: ::libc::c_uint = 3;
pub const b8: ::libc::c_uint = 4;
pub const s32: ::libc::c_uint = 5;
pub const u32: ::libc::c_uint = 6;
pub const u8: ::libc::c_uint = 7;
pub const s64: ::libc::c_uint = 8;
pub const u64: ::libc::c_uint = 9;
pub type af_dtype = Enum_Unnamed9;
pub type Enum_Unnamed10 = ::libc::c_uint;
pub const afDevice: ::libc::c_uint = 0;
pub const afHost: ::libc::c_uint = 1;
pub type af_source = Enum_Unnamed10;
pub type af_array = *mut ::libc::c_void;
pub type Enum_Unnamed11 = ::libc::c_uint;
pub const AF_INTERP_NEAREST: ::libc::c_uint = 0;
pub const AF_INTERP_LINEAR: ::libc::c_uint = 1;
pub const AF_INTERP_BILINEAR: ::libc::c_uint = 2;
pub const AF_INTERP_CUBIC: ::libc::c_uint = 3;
pub type af_interp_type = Enum_Unnamed11;
pub type Enum_Unnamed12 = ::libc::c_uint;
pub const AF_PAD_ZERO: ::libc::c_uint = 0;
pub const AF_PAD_SYM: ::libc::c_uint = 1;
pub type af_border_type = Enum_Unnamed12;
pub type Enum_Unnamed13 = ::libc::c_uint;
pub const AF_CONNECTIVITY_4: ::libc::c_uint = 4;
pub const AF_CONNECTIVITY_8: ::libc::c_uint = 8;
pub type af_connectivity = Enum_Unnamed13;
pub type Enum_Unnamed14 = ::libc::c_uint;
pub const AF_CONV_DEFAULT: ::libc::c_uint = 0;
pub const AF_CONV_EXPAND: ::libc::c_uint = 1;
pub type af_conv_mode = Enum_Unnamed14;
pub type Enum_Unnamed15 = ::libc::c_uint;
pub const AF_CONV_AUTO: ::libc::c_uint = 0;
pub const AF_CONV_SPATIAL: ::libc::c_uint = 1;
pub const AF_CONV_FREQ: ::libc::c_uint = 2;
pub type af_conv_domain = Enum_Unnamed15;
pub type Enum_Unnamed16 = ::libc::c_uint;
pub const AF_SAD: ::libc::c_uint = 0;
pub const AF_ZSAD: ::libc::c_uint = 1;
pub const AF_LSAD: ::libc::c_uint = 2;
pub const AF_SSD: ::libc::c_uint = 3;
pub const AF_ZSSD: ::libc::c_uint = 4;
pub const AF_LSSD: ::libc::c_uint = 5;
pub const AF_NCC: ::libc::c_uint = 6;
pub const AF_ZNCC: ::libc::c_uint = 7;
pub const AF_SHD: ::libc::c_uint = 8;
pub type af_match_type = Enum_Unnamed16;
pub type Enum_Unnamed17 = ::libc::c_uint;
pub const AF_GRAY: ::libc::c_uint = 0;
pub const AF_RGB: ::libc::c_uint = 1;
pub const AF_HSV: ::libc::c_uint = 2;
pub type af_cspace_t = Enum_Unnamed17;
pub type Enum_Unnamed18 = ::libc::c_uint;
pub const AF_MAT_NONE: ::libc::c_uint = 0;
pub const AF_MAT_TRANS: ::libc::c_uint = 1;
pub const AF_MAT_CTRANS: ::libc::c_uint = 2;
pub const AF_MAT_UPPER: ::libc::c_uint = 32;
pub const AF_MAT_LOWER: ::libc::c_uint = 64;
pub const AF_MAT_DIAG_UNIT: ::libc::c_uint = 128;
pub const AF_MAT_SYM: ::libc::c_uint = 512;
pub const AF_MAT_POSDEF: ::libc::c_uint = 1024;
pub const AF_MAT_ORTHOG: ::libc::c_uint = 2048;
pub const AF_MAT_TRI_DIAG: ::libc::c_uint = 4096;
pub const AF_MAT_BLOCK_DIAG: ::libc::c_uint = 8192;
pub type af_mat_prop = Enum_Unnamed18;
pub type Enum_Unnamed19 = ::libc::c_uint;
pub const AF_NORM_VECTOR_1: ::libc::c_uint = 0;
pub const AF_NORM_VECTOR_INF: ::libc::c_uint = 1;
pub const AF_NORM_VECTOR_2: ::libc::c_uint = 2;
pub const AF_NORM_VECTOR_P: ::libc::c_uint = 3;
pub const AF_NORM_MATRIX_1: ::libc::c_uint = 4;
pub const AF_NORM_MATRIX_INF: ::libc::c_uint = 5;
pub const AF_NORM_MATRIX_2: ::libc::c_uint = 6;
pub const AF_NORM_MATRIX_L_PQ: ::libc::c_uint = 7;
pub const AF_NORM_EUCLID: ::libc::c_uint = 2;
pub type af_norm_type = Enum_Unnamed19;
pub type Enum_Unnamed20 = ::libc::c_uint;
pub const AF_COLORMAP_DEFAULT: ::libc::c_uint = 0;
pub const AF_COLORMAP_SPECTRUM: ::libc::c_uint = 1;
pub const AF_COLORMAP_COLORS: ::libc::c_uint = 2;
pub const AF_COLORMAP_RED: ::libc::c_uint = 3;
pub const AF_COLORMAP_MOOD: ::libc::c_uint = 4;
pub const AF_COLORMAP_HEAT: ::libc::c_uint = 5;
pub const AF_COLORMAP_BLUE: ::libc::c_uint = 6;
pub type af_colormap = Enum_Unnamed20;
pub type Enum_Unnamed21 = ::libc::c_uint;
pub const AF_ID: ::libc::c_uint = 0;
pub type af_someenum_t = Enum_Unnamed21;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_af_seq {
    pub begin: ::libc::c_double,
    pub end: ::libc::c_double,
    pub step: ::libc::c_double,
}
impl ::std::clone::Clone for Struct_af_seq {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_af_seq {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type af_seq = Struct_af_seq;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_af_index_t {
    pub idx: Union_Unnamed22,
    pub isSeq: u8,
    pub isBatch: u8,
}
impl ::std::clone::Clone for Struct_af_index_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_af_index_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed22 {
    pub _bindgen_data_: [u64; 3usize],
}
impl Union_Unnamed22 {
    pub unsafe fn arr(&mut self) -> *mut af_array {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn seq(&mut self) -> *mut af_seq {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed22 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed22 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type af_index_t = Struct_af_index_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_af_cfloat {
    pub real: ::libc::c_float,
    pub imag: ::libc::c_float,
}
impl ::std::clone::Clone for Struct_af_cfloat {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_af_cfloat {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type af_cfloat = Struct_af_cfloat;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_af_cdouble {
    pub real: ::libc::c_double,
    pub imag: ::libc::c_double,
}
impl ::std::clone::Clone for Struct_af_cdouble {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_af_cdouble {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type af_cdouble = Struct_af_cdouble;
pub type af_features = *mut ::libc::c_void;
pub type af_window = ::libc::c_ulonglong;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed23 {
    pub row: ::libc::c_int,
    pub col: ::libc::c_int,
    pub title: *const ::libc::c_char,
    pub cmap: af_colormap,
}
impl ::std::clone::Clone for Struct_Unnamed23 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed23 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type af_cell = Struct_Unnamed23;
pub type __builtin_va_list = [__va_list_tag; 1usize];
pub type __va_list_tag = Struct___va_list_tag;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___va_list_tag {
    pub gp_offset: ::libc::c_uint,
    pub fp_offset: ::libc::c_uint,
    pub overflow_arg_area: *mut ::libc::c_void,
    pub reg_save_area: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct___va_list_tag {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___va_list_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
extern "C" {
    pub static mut __mb_cur_max: ::libc::c_int;
    pub static mut suboptarg: *mut ::libc::c_char;
}
extern "C" {
    pub fn signal(arg1: ::libc::c_int,
                  arg2:
                      ::std::option::Option<extern "C" fn(arg1: ::libc::c_int)
                                                -> ()>)
     ->
         ::std::option::Option<extern "C" fn(arg1: ::libc::c_int,
                                             arg2:
                                                 ::std::option::Option<extern "C" fn(arg1:
                                                                                         ::libc::c_int)
                                                                           ->
                                                                               ()>)
                                   -> ()>;
    pub fn getpriority(arg1: ::libc::c_int, arg2: id_t) -> ::libc::c_int;
    pub fn getiopolicy_np(arg1: ::libc::c_int, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn getrlimit(arg1: ::libc::c_int, arg2: *mut Struct_rlimit)
     -> ::libc::c_int;
    pub fn getrusage(arg1: ::libc::c_int, arg2: *mut Struct_rusage)
     -> ::libc::c_int;
    pub fn setpriority(arg1: ::libc::c_int, arg2: id_t, arg3: ::libc::c_int)
     -> ::libc::c_int;
    pub fn setiopolicy_np(arg1: ::libc::c_int, arg2: ::libc::c_int,
                          arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn setrlimit(arg1: ::libc::c_int, arg2: *const Struct_rlimit)
     -> ::libc::c_int;
    pub fn wait(arg1: *mut ::libc::c_int) -> pid_t;
    pub fn waitpid(arg1: pid_t, arg2: *mut ::libc::c_int, arg3: ::libc::c_int)
     -> pid_t;
    pub fn waitid(arg1: idtype_t, arg2: id_t, arg3: *mut siginfo_t,
                  arg4: ::libc::c_int) -> ::libc::c_int;
    pub fn wait3(arg1: *mut ::libc::c_int, arg2: ::libc::c_int,
                 arg3: *mut Struct_rusage) -> pid_t;
    pub fn wait4(arg1: pid_t, arg2: *mut ::libc::c_int, arg3: ::libc::c_int,
                 arg4: *mut Struct_rusage) -> pid_t;
    pub fn alloca(arg1: size_t) -> *mut ::libc::c_void;
    pub fn abort() -> ();
    pub fn abs(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn atexit(arg1: ::std::option::Option<extern "C" fn() -> ()>)
     -> ::libc::c_int;
    pub fn atof(arg1: *const ::libc::c_char) -> ::libc::c_double;
    pub fn atoi(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn atol(arg1: *const ::libc::c_char) -> ::libc::c_long;
    pub fn atoll(arg1: *const ::libc::c_char) -> ::libc::c_longlong;
    pub fn bsearch(arg1: *const ::libc::c_void, arg2: *const ::libc::c_void,
                   arg3: size_t, arg4: size_t,
                   arg5:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *const ::libc::c_void,
                                                           arg2:
                                                               *const ::libc::c_void)
                                                 -> ::libc::c_int>)
     -> *mut ::libc::c_void;
    pub fn calloc(arg1: size_t, arg2: size_t) -> *mut ::libc::c_void;
    pub fn div(arg1: ::libc::c_int, arg2: ::libc::c_int) -> div_t;
    pub fn exit(arg1: ::libc::c_int) -> ();
    pub fn free(arg1: *mut ::libc::c_void) -> ();
    pub fn getenv(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn labs(arg1: ::libc::c_long) -> ::libc::c_long;
    pub fn ldiv(arg1: ::libc::c_long, arg2: ::libc::c_long) -> ldiv_t;
    pub fn llabs(arg1: ::libc::c_longlong) -> ::libc::c_longlong;
    pub fn lldiv(arg1: ::libc::c_longlong, arg2: ::libc::c_longlong)
     -> lldiv_t;
    pub fn malloc(arg1: size_t) -> *mut ::libc::c_void;
    pub fn mblen(arg1: *const ::libc::c_char, arg2: size_t) -> ::libc::c_int;
    pub fn mbstowcs(arg1: *mut wchar_t, arg2: *const ::libc::c_char,
                    arg3: size_t) -> size_t;
    pub fn mbtowc(arg1: *mut wchar_t, arg2: *const ::libc::c_char,
                  arg3: size_t) -> ::libc::c_int;
    pub fn posix_memalign(arg1: *mut *mut ::libc::c_void, arg2: size_t,
                          arg3: size_t) -> ::libc::c_int;
    pub fn qsort(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                 arg4:
                     ::std::option::Option<extern "C" fn(arg1:
                                                             *const ::libc::c_void,
                                                         arg2:
                                                             *const ::libc::c_void)
                                               -> ::libc::c_int>) -> ();
    pub fn rand() -> ::libc::c_int;
    pub fn realloc(arg1: *mut ::libc::c_void, arg2: size_t)
     -> *mut ::libc::c_void;
    pub fn srand(arg1: ::libc::c_uint) -> ();
    pub fn strtod(arg1: *const ::libc::c_char, arg2: *mut *mut ::libc::c_char)
     -> ::libc::c_double;
    pub fn strtof(arg1: *const ::libc::c_char, arg2: *mut *mut ::libc::c_char)
     -> ::libc::c_float;
    pub fn strtol(arg1: *const ::libc::c_char, arg2: *mut *mut ::libc::c_char,
                  arg3: ::libc::c_int) -> ::libc::c_long;
    pub fn strtold(arg1: *const ::libc::c_char,
                   arg2: *mut *mut ::libc::c_char) -> ::libc::c_double;
    pub fn strtoll(arg1: *const ::libc::c_char,
                   arg2: *mut *mut ::libc::c_char, arg3: ::libc::c_int)
     -> ::libc::c_longlong;
    pub fn strtoul(arg1: *const ::libc::c_char,
                   arg2: *mut *mut ::libc::c_char, arg3: ::libc::c_int)
     -> ::libc::c_ulong;
    pub fn strtoull(arg1: *const ::libc::c_char,
                    arg2: *mut *mut ::libc::c_char, arg3: ::libc::c_int)
     -> ::libc::c_ulonglong;
    pub fn system(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn wcstombs(arg1: *mut ::libc::c_char, arg2: *const wchar_t,
                    arg3: size_t) -> size_t;
    pub fn wctomb(arg1: *mut ::libc::c_char, arg2: wchar_t) -> ::libc::c_int;
    pub fn _Exit(arg1: ::libc::c_int) -> ();
    pub fn a64l(arg1: *const ::libc::c_char) -> ::libc::c_long;
    pub fn drand48() -> ::libc::c_double;
    pub fn ecvt(arg1: ::libc::c_double, arg2: ::libc::c_int,
                arg3: *mut ::libc::c_int, arg4: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn erand48(arg1: *mut ::libc::c_ushort) -> ::libc::c_double;
    pub fn fcvt(arg1: ::libc::c_double, arg2: ::libc::c_int,
                arg3: *mut ::libc::c_int, arg4: *mut ::libc::c_int)
     -> *mut ::libc::c_char;
    pub fn gcvt(arg1: ::libc::c_double, arg2: ::libc::c_int,
                arg3: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn getsubopt(arg1: *mut *mut ::libc::c_char,
                     arg2: *const *mut ::libc::c_char,
                     arg3: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn grantpt(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn initstate(arg1: ::libc::c_uint, arg2: *mut ::libc::c_char,
                     arg3: size_t) -> *mut ::libc::c_char;
    pub fn jrand48(arg1: *mut ::libc::c_ushort) -> ::libc::c_long;
    pub fn l64a(arg1: ::libc::c_long) -> *mut ::libc::c_char;
    pub fn lcong48(arg1: *mut ::libc::c_ushort) -> ();
    pub fn lrand48() -> ::libc::c_long;
    pub fn mktemp(arg1: *mut ::libc::c_char) -> *mut ::libc::c_char;
    pub fn mkstemp(arg1: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn mrand48() -> ::libc::c_long;
    pub fn nrand48(arg1: *mut ::libc::c_ushort) -> ::libc::c_long;
    pub fn posix_openpt(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn ptsname(arg1: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn putenv(arg1: *mut ::libc::c_char) -> ::libc::c_int;
    pub fn random() -> ::libc::c_long;
    pub fn rand_r(arg1: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn realpath(arg1: *const ::libc::c_char, arg2: *mut ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn seed48(arg1: *mut ::libc::c_ushort) -> *mut ::libc::c_ushort;
    pub fn setenv(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char,
                  arg3: ::libc::c_int) -> ::libc::c_int;
    pub fn setkey(arg1: *const ::libc::c_char) -> ();
    pub fn setstate(arg1: *const ::libc::c_char) -> *mut ::libc::c_char;
    pub fn srand48(arg1: ::libc::c_long) -> ();
    pub fn srandom(arg1: ::libc::c_uint) -> ();
    pub fn unlockpt(arg1: ::libc::c_int) -> ::libc::c_int;
    pub fn unsetenv(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn arc4random() -> u_int32_t;
    pub fn arc4random_addrandom(arg1: *mut ::libc::c_uchar,
                                arg2: ::libc::c_int) -> ();
    pub fn arc4random_buf(arg1: *mut ::libc::c_void, arg2: size_t) -> ();
    pub fn arc4random_stir() -> ();
    pub fn arc4random_uniform(arg1: u_int32_t) -> u_int32_t;
    pub fn atexit_b(arg1: ::libc::c_void) -> ::libc::c_int;
    pub fn bsearch_b(arg1: *const ::libc::c_void, arg2: *const ::libc::c_void,
                     arg3: size_t, arg4: size_t, arg5: ::libc::c_void)
     -> *mut ::libc::c_void;
    pub fn cgetcap(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn cgetclose() -> ::libc::c_int;
    pub fn cgetent(arg1: *mut *mut ::libc::c_char,
                   arg2: *mut *mut ::libc::c_char,
                   arg3: *const ::libc::c_char) -> ::libc::c_int;
    pub fn cgetfirst(arg1: *mut *mut ::libc::c_char,
                     arg2: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn cgetmatch(arg1: *const ::libc::c_char, arg2: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn cgetnext(arg1: *mut *mut ::libc::c_char,
                    arg2: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn cgetnum(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn cgetset(arg1: *const ::libc::c_char) -> ::libc::c_int;
    pub fn cgetstr(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                   arg3: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn cgetustr(arg1: *mut ::libc::c_char, arg2: *const ::libc::c_char,
                    arg3: *mut *mut ::libc::c_char) -> ::libc::c_int;
    pub fn daemon(arg1: ::libc::c_int, arg2: ::libc::c_int) -> ::libc::c_int;
    pub fn devname(arg1: dev_t, arg2: mode_t) -> *mut ::libc::c_char;
    pub fn devname_r(arg1: dev_t, arg2: mode_t, buf: *mut ::libc::c_char,
                     len: ::libc::c_int) -> *mut ::libc::c_char;
    pub fn getbsize(arg1: *mut ::libc::c_int, arg2: *mut ::libc::c_long)
     -> *mut ::libc::c_char;
    pub fn getloadavg(arg1: *mut ::libc::c_double, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn getprogname() -> *const ::libc::c_char;
    pub fn heapsort(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                    arg4:
                        ::std::option::Option<extern "C" fn(arg1:
                                                                *const ::libc::c_void,
                                                            arg2:
                                                                *const ::libc::c_void)
                                                  -> ::libc::c_int>)
     -> ::libc::c_int;
    pub fn heapsort_b(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                      arg4: ::libc::c_void) -> ::libc::c_int;
    pub fn mergesort(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                     arg4:
                         ::std::option::Option<extern "C" fn(arg1:
                                                                 *const ::libc::c_void,
                                                             arg2:
                                                                 *const ::libc::c_void)
                                                   -> ::libc::c_int>)
     -> ::libc::c_int;
    pub fn mergesort_b(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                       arg4: ::libc::c_void) -> ::libc::c_int;
    pub fn psort(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                 arg4:
                     ::std::option::Option<extern "C" fn(arg1:
                                                             *const ::libc::c_void,
                                                         arg2:
                                                             *const ::libc::c_void)
                                               -> ::libc::c_int>) -> ();
    pub fn psort_b(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                   arg4: ::libc::c_void) -> ();
    pub fn psort_r(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                   arg4: *mut ::libc::c_void,
                   arg5:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *mut ::libc::c_void,
                                                           arg2:
                                                               *const ::libc::c_void,
                                                           arg3:
                                                               *const ::libc::c_void)
                                                 -> ::libc::c_int>) -> ();
    pub fn qsort_b(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                   arg4: ::libc::c_void) -> ();
    pub fn qsort_r(arg1: *mut ::libc::c_void, arg2: size_t, arg3: size_t,
                   arg4: *mut ::libc::c_void,
                   arg5:
                       ::std::option::Option<extern "C" fn(arg1:
                                                               *mut ::libc::c_void,
                                                           arg2:
                                                               *const ::libc::c_void,
                                                           arg3:
                                                               *const ::libc::c_void)
                                                 -> ::libc::c_int>) -> ();
    pub fn radixsort(arg1: *mut *const ::libc::c_uchar, arg2: ::libc::c_int,
                     arg3: *const ::libc::c_uchar, arg4: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn setprogname(arg1: *const ::libc::c_char) -> ();
    pub fn sradixsort(arg1: *mut *const ::libc::c_uchar, arg2: ::libc::c_int,
                      arg3: *const ::libc::c_uchar, arg4: ::libc::c_uint)
     -> ::libc::c_int;
    pub fn sranddev() -> ();
    pub fn srandomdev() -> ();
    pub fn reallocf(arg1: *mut ::libc::c_void, arg2: size_t)
     -> *mut ::libc::c_void;
    pub fn strtoq(arg1: *const ::libc::c_char, arg2: *mut *mut ::libc::c_char,
                  arg3: ::libc::c_int) -> ::libc::c_longlong;
    pub fn strtouq(arg1: *const ::libc::c_char,
                   arg2: *mut *mut ::libc::c_char, arg3: ::libc::c_int)
     -> ::libc::c_ulonglong;
    pub fn valloc(arg1: size_t) -> *mut ::libc::c_void;
    pub fn af_sum(out: *mut af_array, _in: af_array, dim: ::libc::c_int)
     -> af_err;
    pub fn af_product(out: *mut af_array, _in: af_array, dim: ::libc::c_int)
     -> af_err;
    pub fn af_min(out: *mut af_array, _in: af_array, dim: ::libc::c_int)
     -> af_err;
    pub fn af_max(out: *mut af_array, _in: af_array, dim: ::libc::c_int)
     -> af_err;
    pub fn af_all_true(out: *mut af_array, _in: af_array, dim: ::libc::c_int)
     -> af_err;
    pub fn af_any_true(out: *mut af_array, _in: af_array, dim: ::libc::c_int)
     -> af_err;
    pub fn af_count(out: *mut af_array, _in: af_array, dim: ::libc::c_int)
     -> af_err;
    pub fn af_sum_all(real: *mut ::libc::c_double,
                      imag: *mut ::libc::c_double, _in: af_array) -> af_err;
    pub fn af_product_all(real: *mut ::libc::c_double,
                          imag: *mut ::libc::c_double, _in: af_array)
     -> af_err;
    pub fn af_min_all(real: *mut ::libc::c_double,
                      imag: *mut ::libc::c_double, _in: af_array) -> af_err;
    pub fn af_max_all(real: *mut ::libc::c_double,
                      imag: *mut ::libc::c_double, _in: af_array) -> af_err;
    pub fn af_all_true_all(real: *mut ::libc::c_double,
                           imag: *mut ::libc::c_double, _in: af_array)
     -> af_err;
    pub fn af_any_true_all(real: *mut ::libc::c_double,
                           imag: *mut ::libc::c_double, _in: af_array)
     -> af_err;
    pub fn af_count_all(real: *mut ::libc::c_double,
                        imag: *mut ::libc::c_double, _in: af_array) -> af_err;
    pub fn af_imin(out: *mut af_array, idx: *mut af_array, _in: af_array,
                   dim: ::libc::c_int) -> af_err;
    pub fn af_imax(out: *mut af_array, idx: *mut af_array, _in: af_array,
                   dim: ::libc::c_int) -> af_err;
    pub fn af_imin_all(real: *mut ::libc::c_double,
                       imag: *mut ::libc::c_double, idx: *mut ::libc::c_uint,
                       _in: af_array) -> af_err;
    pub fn af_imax_all(real: *mut ::libc::c_double,
                       imag: *mut ::libc::c_double, idx: *mut ::libc::c_uint,
                       _in: af_array) -> af_err;
    pub fn af_accum(out: *mut af_array, _in: af_array, dim: ::libc::c_int)
     -> af_err;
    pub fn af_where(idx: *mut af_array, _in: af_array) -> af_err;
    pub fn af_diff1(out: *mut af_array, _in: af_array, dim: ::libc::c_int)
     -> af_err;
    pub fn af_diff2(out: *mut af_array, _in: af_array, dim: ::libc::c_int)
     -> af_err;
    pub fn af_sort(out: *mut af_array, _in: af_array, dim: ::libc::c_uint,
                   isAscending: u8) -> af_err;
    pub fn af_sort_index(out: *mut af_array, indices: *mut af_array,
                         _in: af_array, dim: ::libc::c_uint, isAscending: u8)
     -> af_err;
    pub fn af_sort_by_key(out_keys: *mut af_array, out_values: *mut af_array,
                          keys: af_array, values: af_array,
                          dim: ::libc::c_uint, isAscending: u8) -> af_err;
    pub fn af_set_unique(out: *mut af_array, _in: af_array, is_sorted: u8)
     -> af_err;
    pub fn af_set_union(out: *mut af_array, first: af_array, second: af_array,
                        is_unique: u8) -> af_err;
    pub fn af_set_intersect(out: *mut af_array, first: af_array,
                            second: af_array, is_unique: u8) -> af_err;
    pub fn af_add(out: *mut af_array, lhs: af_array, rhs: af_array, batch: u8)
     -> af_err;
    pub fn af_sub(out: *mut af_array, lhs: af_array, rhs: af_array, batch: u8)
     -> af_err;
    pub fn af_mul(out: *mut af_array, lhs: af_array, rhs: af_array, batch: u8)
     -> af_err;
    pub fn af_div(out: *mut af_array, lhs: af_array, rhs: af_array, batch: u8)
     -> af_err;
    pub fn af_lt(out: *mut af_array, lhs: af_array, rhs: af_array, batch: u8)
     -> af_err;
    pub fn af_gt(out: *mut af_array, lhs: af_array, rhs: af_array, batch: u8)
     -> af_err;
    pub fn af_le(out: *mut af_array, lhs: af_array, rhs: af_array, batch: u8)
     -> af_err;
    pub fn af_ge(out: *mut af_array, lhs: af_array, rhs: af_array, batch: u8)
     -> af_err;
    pub fn af_eq(out: *mut af_array, lhs: af_array, rhs: af_array, batch: u8)
     -> af_err;
    pub fn af_neq(out: *mut af_array, lhs: af_array, rhs: af_array, batch: u8)
     -> af_err;
    pub fn af_and(out: *mut af_array, lhs: af_array, rhs: af_array, batch: u8)
     -> af_err;
    pub fn af_or(out: *mut af_array, lhs: af_array, rhs: af_array, batch: u8)
     -> af_err;
    pub fn af_not(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_bitand(out: *mut af_array, lhs: af_array, rhs: af_array,
                     batch: u8) -> af_err;
    pub fn af_bitor(out: *mut af_array, lhs: af_array, rhs: af_array,
                    batch: u8) -> af_err;
    pub fn af_bitxor(out: *mut af_array, lhs: af_array, rhs: af_array,
                     batch: u8) -> af_err;
    pub fn af_bitshiftl(out: *mut af_array, lhs: af_array, rhs: af_array,
                        batch: u8) -> af_err;
    pub fn af_bitshiftr(out: *mut af_array, lhs: af_array, rhs: af_array,
                        batch: u8) -> af_err;
    pub fn af_cast(out: *mut af_array, _in: af_array, _type: af_dtype)
     -> af_err;
    pub fn af_minof(out: *mut af_array, lhs: af_array, rhs: af_array,
                    batch: u8) -> af_err;
    pub fn af_maxof(out: *mut af_array, lhs: af_array, rhs: af_array,
                    batch: u8) -> af_err;
    pub fn af_rem(out: *mut af_array, lhs: af_array, rhs: af_array, batch: u8)
     -> af_err;
    pub fn af_mod(out: *mut af_array, lhs: af_array, rhs: af_array, batch: u8)
     -> af_err;
    pub fn af_abs(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_arg(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_sign(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_round(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_trunc(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_floor(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_ceil(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_hypot(out: *mut af_array, lhs: af_array, rhs: af_array,
                    batch: u8) -> af_err;
    pub fn af_sin(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_cos(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_tan(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_asin(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_acos(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_atan(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_atan2(out: *mut af_array, lhs: af_array, rhs: af_array,
                    batch: u8) -> af_err;
    pub fn af_cplx2(out: *mut af_array, lhs: af_array, rhs: af_array,
                    batch: u8) -> af_err;
    pub fn af_cplx(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_real(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_imag(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_conjg(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_sinh(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_cosh(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_tanh(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_asinh(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_acosh(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_atanh(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_root(out: *mut af_array, lhs: af_array, rhs: af_array,
                   batch: u8) -> af_err;
    pub fn af_pow(out: *mut af_array, lhs: af_array, rhs: af_array, batch: u8)
     -> af_err;
    pub fn af_pow2(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_exp(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_expm1(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_erf(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_erfc(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_log(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_log1p(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_log10(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_log2(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_sqrt(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_cbrt(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_factorial(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_tgamma(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_lgamma(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_iszero(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_isinf(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_isnan(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_make_seq(begin: ::libc::c_double, end: ::libc::c_double,
                       step: ::libc::c_double) -> af_seq;
    pub fn af_get_elements(elems: *mut dim_t, arr: af_array) -> af_err;
    pub fn af_get_type(_type: *mut af_dtype, arr: af_array) -> af_err;
    pub fn af_get_dims(d0: *mut dim_t, d1: *mut dim_t, d2: *mut dim_t,
                       d3: *mut dim_t, arr: af_array) -> af_err;
    pub fn af_get_numdims(result: *mut ::libc::c_uint, arr: af_array)
     -> af_err;
    pub fn af_is_empty(result: *mut u8, arr: af_array) -> af_err;
    pub fn af_is_scalar(result: *mut u8, arr: af_array) -> af_err;
    pub fn af_is_row(result: *mut u8, arr: af_array) -> af_err;
    pub fn af_is_column(result: *mut u8, arr: af_array) -> af_err;
    pub fn af_is_vector(result: *mut u8, arr: af_array) -> af_err;
    pub fn af_is_complex(result: *mut u8, arr: af_array) -> af_err;
    pub fn af_is_real(result: *mut u8, arr: af_array) -> af_err;
    pub fn af_is_double(result: *mut u8, arr: af_array) -> af_err;
    pub fn af_is_single(result: *mut u8, arr: af_array) -> af_err;
    pub fn af_is_realfloating(result: *mut u8, arr: af_array) -> af_err;
    pub fn af_is_floating(result: *mut u8, arr: af_array) -> af_err;
    pub fn af_is_integer(result: *mut u8, arr: af_array) -> af_err;
    pub fn af_is_bool(result: *mut u8, arr: af_array) -> af_err;
    pub fn af_print_array(arr: af_array) -> af_err;
    pub fn af_example_function(out: *mut af_array, _in: af_array,
                               param: af_someenum_t) -> af_err;
    pub fn af_get_version(major: *mut ::libc::c_int,
                          minor: *mut ::libc::c_int,
                          patch: *mut ::libc::c_int) -> af_err;
    pub fn af_index(out: *mut af_array, _in: af_array, ndims: ::libc::c_uint,
                    index: *const af_seq) -> af_err;
    pub fn af_lookup(out: *mut af_array, _in: af_array, indices: af_array,
                     dim: ::libc::c_uint) -> af_err;
    pub fn af_assign_seq(out: *mut af_array, lhs: af_array,
                         ndims: ::libc::c_uint, indices: *const af_seq,
                         rhs: af_array) -> af_err;
    pub fn af_index_gen(out: *mut af_array, _in: af_array, ndims: dim_t,
                        indices: *const af_index_t) -> af_err;
    pub fn af_assign_gen(out: *mut af_array, lhs: af_array, ndims: dim_t,
                         indices: *const af_index_t, rhs: af_array) -> af_err;
    pub fn af_create_array(arr: *mut af_array, data: *const ::libc::c_void,
                           ndims: ::libc::c_uint, dims: *const dim_t,
                           _type: af_dtype) -> af_err;
    pub fn af_create_handle(arr: *mut af_array, ndims: ::libc::c_uint,
                            dims: *const dim_t, _type: af_dtype) -> af_err;
    pub fn af_copy_array(arr: *mut af_array, _in: af_array) -> af_err;
    pub fn af_write_array(arr: af_array, data: *const ::libc::c_void,
                          bytes: size_t, src: af_source) -> af_err;
    pub fn af_get_data_ptr(data: *mut ::libc::c_void, arr: af_array)
     -> af_err;
    pub fn af_release_array(arr: af_array) -> af_err;
    pub fn af_retain_array(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_eval(_in: af_array) -> af_err;
    pub fn af_matmul(out: *mut af_array, lhs: af_array, rhs: af_array,
                     optLhs: af_mat_prop, optRhs: af_mat_prop) -> af_err;
    pub fn af_dot(out: *mut af_array, lhs: af_array, rhs: af_array,
                  optLhs: af_mat_prop, optRhs: af_mat_prop) -> af_err;
    pub fn af_transpose(out: *mut af_array, _in: af_array, conjugate: u8)
     -> af_err;
    pub fn af_transpose_inplace(_in: af_array, conjugate: u8) -> af_err;
    pub fn af_constant(arr: *mut af_array, val: ::libc::c_double,
                       ndims: ::libc::c_uint, dims: *const dim_t,
                       _type: af_dtype) -> af_err;
    pub fn af_constant_complex(arr: *mut af_array, real: ::libc::c_double,
                               imag: ::libc::c_double, ndims: ::libc::c_uint,
                               dims: *const dim_t, _type: af_dtype) -> af_err;
    pub fn af_constant_long(arr: *mut af_array, val: intl,
                            ndims: ::libc::c_uint, dims: *const dim_t)
     -> af_err;
    pub fn af_constant_ulong(arr: *mut af_array, val: uintl,
                             ndims: ::libc::c_uint, dims: *const dim_t)
     -> af_err;
    pub fn af_range(out: *mut af_array, ndims: ::libc::c_uint,
                    dims: *const dim_t, seq_dim: ::libc::c_int,
                    _type: af_dtype) -> af_err;
    pub fn af_iota(out: *mut af_array, ndims: ::libc::c_uint,
                   dims: *const dim_t, t_ndims: ::libc::c_uint,
                   tdims: *const dim_t, _type: af_dtype) -> af_err;
    pub fn af_randu(out: *mut af_array, ndims: ::libc::c_uint,
                    dims: *const dim_t, _type: af_dtype) -> af_err;
    pub fn af_randn(out: *mut af_array, ndims: ::libc::c_uint,
                    dims: *const dim_t, _type: af_dtype) -> af_err;
    pub fn af_set_seed(seed: uintl) -> af_err;
    pub fn af_get_seed(seed: *mut uintl) -> af_err;
    pub fn af_identity(out: *mut af_array, ndims: ::libc::c_uint,
                       dims: *const dim_t, _type: af_dtype) -> af_err;
    pub fn af_diag_create(out: *mut af_array, _in: af_array,
                          num: ::libc::c_int) -> af_err;
    pub fn af_diag_extract(out: *mut af_array, _in: af_array,
                           num: ::libc::c_int) -> af_err;
    pub fn af_join(out: *mut af_array, dim: ::libc::c_int, first: af_array,
                   second: af_array) -> af_err;
    pub fn af_join_many(out: *mut af_array, dim: ::libc::c_int,
                        n_arrays: ::libc::c_uint, inputs: *const af_array)
     -> af_err;
    pub fn af_tile(out: *mut af_array, _in: af_array, x: ::libc::c_uint,
                   y: ::libc::c_uint, z: ::libc::c_uint, w: ::libc::c_uint)
     -> af_err;
    pub fn af_reorder(out: *mut af_array, _in: af_array, x: ::libc::c_uint,
                      y: ::libc::c_uint, z: ::libc::c_uint, w: ::libc::c_uint)
     -> af_err;
    pub fn af_shift(out: *mut af_array, _in: af_array, x: ::libc::c_int,
                    y: ::libc::c_int, z: ::libc::c_int, w: ::libc::c_int)
     -> af_err;
    pub fn af_moddims(out: *mut af_array, _in: af_array,
                      ndims: ::libc::c_uint, dims: *const dim_t) -> af_err;
    pub fn af_flat(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_flip(out: *mut af_array, _in: af_array, dim: ::libc::c_uint)
     -> af_err;
    pub fn af_lower(out: *mut af_array, _in: af_array, is_unit_diag: u8)
     -> af_err;
    pub fn af_upper(out: *mut af_array, _in: af_array, is_unit_diag: u8)
     -> af_err;
    pub fn af_info() -> af_err;
    pub fn af_init() -> af_err;
    pub fn af_device_info(d_name: *mut ::libc::c_char,
                          d_platform: *mut ::libc::c_char,
                          d_toolkit: *mut ::libc::c_char,
                          d_compute: *mut ::libc::c_char) -> af_err;
    pub fn af_get_device_count(num_of_devices: *mut ::libc::c_int) -> af_err;
    pub fn af_get_dbl_support(available: *mut u8, device: ::libc::c_int)
     -> af_err;
    pub fn af_set_device(device: ::libc::c_int) -> af_err;
    pub fn af_get_device(device: *mut ::libc::c_int) -> af_err;
    pub fn af_sync(device: ::libc::c_int) -> af_err;
    pub fn af_get_device_ptr(ptr: *mut *mut ::libc::c_void, arr: af_array)
     -> af_err;
    pub fn af_alloc_device(ptr: *mut *mut ::libc::c_void, bytes: dim_t)
     -> af_err;
    pub fn af_alloc_pinned(ptr: *mut *mut ::libc::c_void, bytes: dim_t)
     -> af_err;
    pub fn af_free_device(ptr: *mut ::libc::c_void) -> af_err;
    pub fn af_free_pinned(ptr: *mut ::libc::c_void) -> af_err;
    pub fn af_device_array(arr: *mut af_array, data: *const ::libc::c_void,
                           ndims: ::libc::c_uint, dims: *const dim_t,
                           _type: af_dtype) -> af_err;
    pub fn af_device_mem_info(alloc_bytes: *mut size_t,
                              alloc_buffers: *mut size_t,
                              lock_bytes: *mut size_t,
                              lock_buffers: *mut size_t) -> af_err;
    pub fn af_device_gc() -> af_err;
    pub fn af_set_mem_step_size(step_bytes: size_t) -> af_err;
    pub fn af_get_mem_step_size(step_bytes: *mut size_t) -> af_err;
    pub fn af_get_last_error(msg: *mut *mut ::libc::c_char, len: *mut dim_t)
     -> ();
    pub fn af_err_to_string(err: af_err) -> *const ::libc::c_char;
    pub fn af_create_features(feat: *mut af_features, num: dim_t) -> af_err;
    pub fn af_retain_features(out: *mut af_features, feat: af_features)
     -> af_err;
    pub fn af_get_features_num(num: *mut dim_t, feat: af_features) -> af_err;
    pub fn af_get_features_xpos(out: *mut af_array, feat: af_features)
     -> af_err;
    pub fn af_get_features_ypos(out: *mut af_array, feat: af_features)
     -> af_err;
    pub fn af_get_features_score(score: *mut af_array, feat: af_features)
     -> af_err;
    pub fn af_get_features_orientation(orientation: *mut af_array,
                                       feat: af_features) -> af_err;
    pub fn af_get_features_size(size: *mut af_array, feat: af_features)
     -> af_err;
    pub fn af_release_features(feat: af_features) -> af_err;
    pub fn af_create_window(out: *mut af_window, width: ::libc::c_int,
                            height: ::libc::c_int,
                            title: *const ::libc::c_char) -> af_err;
    pub fn af_set_position(wind: af_window, x: ::libc::c_uint,
                           y: ::libc::c_uint) -> af_err;
    pub fn af_set_title(wind: af_window, title: *const ::libc::c_char)
     -> af_err;
    pub fn af_draw_image(wind: af_window, _in: af_array,
                         props: *const af_cell) -> af_err;
    pub fn af_draw_plot(wind: af_window, X: af_array, Y: af_array,
                        props: *const af_cell) -> af_err;
    pub fn af_draw_hist(wind: af_window, X: af_array,
                        minval: ::libc::c_double, maxval: ::libc::c_double,
                        props: *const af_cell) -> af_err;
    pub fn af_grid(wind: af_window, rows: ::libc::c_int, cols: ::libc::c_int)
     -> af_err;
    pub fn af_show(wind: af_window) -> af_err;
    pub fn af_is_window_closed(out: *mut u8, wind: af_window) -> af_err;
    pub fn af_destroy_window(wind: af_window) -> af_err;
    pub fn af_gradient(dx: *mut af_array, dy: *mut af_array, _in: af_array)
     -> af_err;
    pub fn af_load_image(out: *mut af_array, filename: *const ::libc::c_char,
                         isColor: u8) -> af_err;
    pub fn af_save_image(filename: *const ::libc::c_char, _in: af_array)
     -> af_err;
    pub fn af_resize(out: *mut af_array, _in: af_array, odim0: dim_t,
                     odim1: dim_t, method: af_interp_type) -> af_err;
    pub fn af_transform(out: *mut af_array, _in: af_array,
                        transform: af_array, odim0: dim_t, odim1: dim_t,
                        method: af_interp_type, inverse: u8) -> af_err;
    pub fn af_rotate(out: *mut af_array, _in: af_array,
                     theta: ::libc::c_float, crop: u8, method: af_interp_type)
     -> af_err;
    pub fn af_translate(out: *mut af_array, _in: af_array,
                        trans0: ::libc::c_float, trans1: ::libc::c_float,
                        odim0: dim_t, odim1: dim_t, method: af_interp_type)
     -> af_err;
    pub fn af_scale(out: *mut af_array, _in: af_array,
                    scale0: ::libc::c_float, scale1: ::libc::c_float,
                    odim0: dim_t, odim1: dim_t, method: af_interp_type)
     -> af_err;
    pub fn af_skew(out: *mut af_array, _in: af_array, skew0: ::libc::c_float,
                   skew1: ::libc::c_float, odim0: dim_t, odim1: dim_t,
                   method: af_interp_type, inverse: u8) -> af_err;
    pub fn af_histogram(out: *mut af_array, _in: af_array,
                        nbins: ::libc::c_uint, minval: ::libc::c_double,
                        maxval: ::libc::c_double) -> af_err;
    pub fn af_dilate(out: *mut af_array, _in: af_array, mask: af_array)
     -> af_err;
    pub fn af_dilate3(out: *mut af_array, _in: af_array, mask: af_array)
     -> af_err;
    pub fn af_erode(out: *mut af_array, _in: af_array, mask: af_array)
     -> af_err;
    pub fn af_erode3(out: *mut af_array, _in: af_array, mask: af_array)
     -> af_err;
    pub fn af_bilateral(out: *mut af_array, _in: af_array,
                        spatial_sigma: ::libc::c_float,
                        chromatic_sigma: ::libc::c_float, isColor: u8)
     -> af_err;
    pub fn af_mean_shift(out: *mut af_array, _in: af_array,
                         spatial_sigma: ::libc::c_float,
                         chromatic_sigma: ::libc::c_float,
                         iter: ::libc::c_uint, is_color: u8) -> af_err;
    pub fn af_medfilt(out: *mut af_array, _in: af_array, wind_length: dim_t,
                      wind_width: dim_t, edge_pad: af_border_type) -> af_err;
    pub fn af_minfilt(out: *mut af_array, _in: af_array, wind_length: dim_t,
                      wind_width: dim_t, edge_pad: af_border_type) -> af_err;
    pub fn af_maxfilt(out: *mut af_array, _in: af_array, wind_length: dim_t,
                      wind_width: dim_t, edge_pad: af_border_type) -> af_err;
    pub fn af_regions(out: *mut af_array, _in: af_array,
                      connectivity: af_connectivity, ty: af_dtype) -> af_err;
    pub fn af_match_template(out: *mut af_array, search_img: af_array,
                             template_img: af_array, m_type: af_match_type)
     -> af_err;
    pub fn af_sobel_operator(dx: *mut af_array, dy: *mut af_array,
                             img: af_array, ker_size: ::libc::c_uint)
     -> af_err;
    pub fn af_rgb2gray(out: *mut af_array, _in: af_array,
                       rPercent: ::libc::c_float, gPercent: ::libc::c_float,
                       bPercent: ::libc::c_float) -> af_err;
    pub fn af_gray2rgb(out: *mut af_array, _in: af_array,
                       rFactor: ::libc::c_float, gFactor: ::libc::c_float,
                       bFactor: ::libc::c_float) -> af_err;
    pub fn af_hist_equal(out: *mut af_array, _in: af_array, hist: af_array)
     -> af_err;
    pub fn af_gaussian_kernel(out: *mut af_array, rows: ::libc::c_int,
                              cols: ::libc::c_int, sigma_r: ::libc::c_double,
                              sigma_c: ::libc::c_double) -> af_err;
    pub fn af_hsv2rgb(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_rgb2hsv(out: *mut af_array, _in: af_array) -> af_err;
    pub fn af_color_space(out: *mut af_array, image: af_array,
                          to: af_cspace_t, from: af_cspace_t) -> af_err;
    pub fn af_lu(lower: *mut af_array, upper: *mut af_array,
                 pivot: *mut af_array, _in: af_array) -> af_err;
    pub fn af_lu_inplace(pivot: *mut af_array, _in: af_array,
                         is_lapack_piv: u8) -> af_err;
    pub fn af_qr(q: *mut af_array, r: *mut af_array, tau: *mut af_array,
                 _in: af_array) -> af_err;
    pub fn af_qr_inplace(tau: *mut af_array, _in: af_array) -> af_err;
    pub fn af_cholesky(out: *mut af_array, info: *mut ::libc::c_int,
                       _in: af_array, is_upper: u8) -> af_err;
    pub fn af_cholesky_inplace(info: *mut ::libc::c_int, _in: af_array,
                               is_upper: u8) -> af_err;
    pub fn af_solve(x: *mut af_array, a: af_array, b: af_array,
                    options: af_mat_prop) -> af_err;
    pub fn af_solve_lu(x: *mut af_array, a: af_array, piv: af_array,
                       b: af_array, options: af_mat_prop) -> af_err;
    pub fn af_inverse(out: *mut af_array, _in: af_array, options: af_mat_prop)
     -> af_err;
    pub fn af_rank(rank: *mut ::libc::c_uint, _in: af_array,
                   tol: ::libc::c_double) -> af_err;
    pub fn af_det(det_real: *mut ::libc::c_double,
                  det_imag: *mut ::libc::c_double, _in: af_array) -> af_err;
    pub fn af_norm(out: *mut ::libc::c_double, _in: af_array,
                   _type: af_norm_type, p: ::libc::c_double,
                   q: ::libc::c_double) -> af_err;
    pub fn af_approx1(out: *mut af_array, _in: af_array, pos: af_array,
                      method: af_interp_type, offGrid: ::libc::c_float)
     -> af_err;
    pub fn af_approx2(out: *mut af_array, _in: af_array, pos0: af_array,
                      pos1: af_array, method: af_interp_type,
                      offGrid: ::libc::c_float) -> af_err;
    pub fn af_fft(out: *mut af_array, _in: af_array,
                  norm_factor: ::libc::c_double, odim0: dim_t) -> af_err;
    pub fn af_fft2(out: *mut af_array, _in: af_array,
                   norm_factor: ::libc::c_double, odim0: dim_t, odim1: dim_t)
     -> af_err;
    pub fn af_fft3(out: *mut af_array, _in: af_array,
                   norm_factor: ::libc::c_double, odim0: dim_t, odim1: dim_t,
                   odim2: dim_t) -> af_err;
    pub fn af_ifft(out: *mut af_array, _in: af_array,
                   norm_factor: ::libc::c_double, odim0: dim_t) -> af_err;
    pub fn af_ifft2(out: *mut af_array, _in: af_array,
                    norm_factor: ::libc::c_double, odim0: dim_t, odim1: dim_t)
     -> af_err;
    pub fn af_ifft3(out: *mut af_array, _in: af_array,
                    norm_factor: ::libc::c_double, odim0: dim_t, odim1: dim_t,
                    odim2: dim_t) -> af_err;
    pub fn af_convolve1(out: *mut af_array, signal: af_array,
                        filter: af_array, mode: af_conv_mode,
                        domain: af_conv_domain) -> af_err;
    pub fn af_convolve2(out: *mut af_array, signal: af_array,
                        filter: af_array, mode: af_conv_mode,
                        domain: af_conv_domain) -> af_err;
    pub fn af_convolve3(out: *mut af_array, signal: af_array,
                        filter: af_array, mode: af_conv_mode,
                        domain: af_conv_domain) -> af_err;
    pub fn af_convolve2_sep(out: *mut af_array, col_filter: af_array,
                            row_filter: af_array, signal: af_array,
                            mode: af_conv_mode) -> af_err;
    pub fn af_fft_convolve1(out: *mut af_array, signal: af_array,
                            filter: af_array, mode: af_conv_mode) -> af_err;
    pub fn af_fft_convolve2(out: *mut af_array, signal: af_array,
                            filter: af_array, mode: af_conv_mode) -> af_err;
    pub fn af_fft_convolve3(out: *mut af_array, signal: af_array,
                            filter: af_array, mode: af_conv_mode) -> af_err;
    pub fn af_fir(y: *mut af_array, b: af_array, x: af_array) -> af_err;
    pub fn af_iir(y: *mut af_array, b: af_array, a: af_array, x: af_array)
     -> af_err;
    pub fn af_mean(out: *mut af_array, _in: af_array, dim: dim_t) -> af_err;
    pub fn af_mean_weighted(out: *mut af_array, _in: af_array,
                            weights: af_array, dim: dim_t) -> af_err;
    pub fn af_var(out: *mut af_array, _in: af_array, isbiased: u8, dim: dim_t)
     -> af_err;
    pub fn af_var_weighted(out: *mut af_array, _in: af_array,
                           weights: af_array, dim: dim_t) -> af_err;
    pub fn af_stdev(out: *mut af_array, _in: af_array, dim: dim_t) -> af_err;
    pub fn af_cov(out: *mut af_array, X: af_array, Y: af_array, isbiased: u8)
     -> af_err;
    pub fn af_median(out: *mut af_array, _in: af_array, dim: dim_t) -> af_err;
    pub fn af_mean_all(real: *mut ::libc::c_double,
                       imag: *mut ::libc::c_double, _in: af_array) -> af_err;
    pub fn af_mean_all_weighted(real: *mut ::libc::c_double,
                                imag: *mut ::libc::c_double, _in: af_array,
                                weights: af_array) -> af_err;
    pub fn af_var_all(realVal: *mut ::libc::c_double,
                      imagVal: *mut ::libc::c_double, _in: af_array,
                      isbiased: u8) -> af_err;
    pub fn af_var_all_weighted(realVal: *mut ::libc::c_double,
                               imagVal: *mut ::libc::c_double, _in: af_array,
                               weights: af_array) -> af_err;
    pub fn af_stdev_all(real: *mut ::libc::c_double,
                        imag: *mut ::libc::c_double, _in: af_array) -> af_err;
    pub fn af_median_all(realVal: *mut ::libc::c_double,
                         imagVal: *mut ::libc::c_double, _in: af_array)
     -> af_err;
    pub fn af_corrcoef(realVal: *mut ::libc::c_double,
                       imagVal: *mut ::libc::c_double, X: af_array,
                       Y: af_array) -> af_err;
    pub fn af_fast(out: *mut af_features, _in: af_array, thr: ::libc::c_float,
                   arc_length: ::libc::c_uint, non_max: u8,
                   feature_ratio: ::libc::c_float, edge: ::libc::c_uint)
     -> af_err;
    pub fn af_orb(feat: *mut af_features, desc: *mut af_array, _in: af_array,
                  fast_thr: ::libc::c_float, max_feat: ::libc::c_uint,
                  scl_fctr: ::libc::c_float, levels: ::libc::c_uint,
                  blur_img: u8) -> af_err;
    pub fn af_hamming_matcher(idx: *mut af_array, dist: *mut af_array,
                              query: af_array, train: af_array,
                              dist_dim: dim_t, n_dist: ::libc::c_uint)
     -> af_err;
}
